//create users controller
//incorporate sessions
//create handlebars templates to render login and sign up forms
//write coffeescript to receive handlebars render function and create a cookie from the session
//use coffeescript to send forms with axios instead of method override
//create click events on login, logout, signup, settings/email spans in coffeescript
//add jquery to html scripts
//add logout path to users controller
//create login = index.hbs, signup = signup.hbs, todos = todos.hbs
//create axios call to render signup
//create axios call to render login
//create axios call to logout
//create backend settings get route
//create settings template
//modify put controller to change both username and password
//create axios calls to hit put controller
//create axios call to render settings
//if front end cookie matches session on index render, send to todos page
//add delete user to settings page

//test users controller and front end

//should update users' password and email with correct cookie and password, display success message
//shouldn't update users' password and email if cookie is wrong, display fail message
//shouldn't update users' password and email if cookie is null, display fail message
//shouldn't update users' password and email if password is wrong, display fail message
//shouldn't update users' password and email if password is null, display fail message
//shouldn't update users' info where nothing is sent, display fail message

//should delete user with cookie and correct password, show success message
//shouldn't delete user if password is wrong, display fail message
//shouldn't delete user if password is null, display fail message
//should't delete user if cookie is wrong, display fail message
//shouldn't delete user if cookie is undefined, display fail message

//should render user settings page
//shouldn't render user settings page if cookie is wrong, display fail message
//shouldn't render user settings page if cookie is undefined, display fail message

//login
//login should fail if password doesn't match, display fail message
//login should fail if username doesn't match any in db, display fail message
//if login is successful, todos page should display success messaage

//signup
//signup should fail if username is already in the db, display fail message
//if signup is successful, todos page should display success message

//nightmare go to root, set timeout
//if cookie is valid, nightmare go to root and load todos page
//if cookie is invalid, nightmare go to root and load login page
//if cookie is undefined, nightmare go to root and load login page


//front end validation
--leaving settings where you can change your password without verifying it

//test front end validation

//test all user api routes
//test user html
//test user front end javascript

combine context and todos controllers

//create contexts controller
//contexts front end validation
//print contexts to page
//write coffeescript to crud adding contexts
//troubleshoot front end adding contexts and rerendering
//append without layout
//troubleshoot click handlers
//write function to get the todos/contexts page from settings

//change it so todos belong to contexts and contexts belong to users?
//only query the db for context where the user is the owner
//migrate three default contexts into each user's account on signup - the internet, home, and work

//test

//change land/auth to a post request

//create todos controller
//todos front end validation
//write front end coffeescript to axios crud the todos
//print todos to page

//fix promises, remove syncs
//replace ids with uuids
//create a fresh migration and reform the db
//read up on the reduce function
//use immutable objects
//explore flash messages  -- not better for a single page app
//contexts can't have spaces in them?
//fix front end to-do validation
//update form to json to handle radio buttons

//custom modal
//write modal coffeescript
edit modal less
//implement edit/delete item (including item context) with a modal
//implement edit/delete contexts with three modals
	//change name of a context
	//batch move all todos in a context to another context
	//delete context with confirm stating it will remove all your todos in that context
//implement back end actions to actually do these three things

//add modal close on context add

//prevent duplicate contexts

//anchor modals to the top??? anchored to the right right now

//actually cascade deletes

add confirm about deleting user irretrievably deleting all todos

//learn less
//look for design inspiration
//style login, signup, and settings pages
write coffeescript and less to create dynamic, interactive todos with adding contexts

add context add to new todo and edit todo modals
transitions on submit
//color coding for done and undone tasks
//get done and undone to stack in order with all done at bottom, out of category context

write tests for item controller
write tests for read controller
write tests for context controller

consider adding tests with nightmare navigating to the page and entering the info

add nodemailer functionality to reset password
